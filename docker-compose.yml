services:
  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports: ["6333:6333"]
    volumes:
      - qdrant_data:/qdrant/storage

  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
    ports: ["5435:5432"]
    volumes:
      - pg_data:/var/lib/postgresql/data

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports: ["11434:11434"]
    volumes:
      - ollama:/root/.ollama
    healthcheck:
      test: [ "CMD", "sh", "-lc", "ollama list >/dev/null 2>&1 || exit 1" ]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 20

  api:
    build: ./services/api
    restart: unless-stopped
    environment:
      # --- OpenAI (LLM + embeddings) ---
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      LLM_BACKEND: openai
      GEN_MODEL: ${GEN_MODEL:-gpt-4o-mini}
      EMBED_MODEL: ${EMBED_MODEL:-text-embedding-3-small}
      GEN_TEMPERATURE: "0"
      GEN_TOP_P: "1"
      GEN_MAX_TOKENS: "512"
      GEN_SEED: "42"

      # --- Qdrant ---
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: pipeline_events
      VALID_NAME: valid_vec
      VALID_DIM: "1536"     # must match EMBED_MODEL dimension
      ERROR_NAME: error_vec
      ERROR_DIM: "1536"     # keep same dim if you store error vectors

      # --- Postgres ---
      POSTGRES_URL: postgresql://app:app@postgres:5432/appdb

      # --- App config ---
      CORS_ORIGINS: http://localhost:8080
      SEMANTIC_MDL_PATH: /app/app/semantic/semantic.yaml
      SEMANTIC_MODE: hybrid
      SEMANTIC_TTL_SEC: "60"
    depends_on:
      qdrant:
        condition: service_started
      postgres:
        condition: service_started
    ports:
      - "8000:8000"

  ui:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./services/ui:/usr/share/nginx/html:ro
      - ./services/ui/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports: [ "8080:80" ]
    depends_on:
      - api

volumes:
  qdrant_data:
  pg_data:
  ollama: